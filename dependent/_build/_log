### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, package(oUnit), package(sexplib), quiet, traverse }
ocamlfind ocamldep -package oUnit -package sexplib -modules main.ml > main.ml.depends
# Target: tactics.ml.depends, tags: { extension:ml, file:tactics.ml, ocaml, ocamldep, package(oUnit), package(sexplib), quiet, traverse }
ocamlfind ocamldep -package oUnit -package sexplib -modules tactics.ml > tactics.ml.depends
# Target: lambda.ml.depends, tags: { extension:ml, file:lambda.ml, ocaml, ocamldep, package(oUnit), package(sexplib), quiet, traverse }
ocamlfind ocamldep -package oUnit -package sexplib -modules lambda.ml > lambda.ml.depends
# Target: zipper.ml.depends, tags: { extension:ml, file:zipper.ml, ocaml, ocamldep, package(oUnit), package(sexplib), quiet, traverse }
ocamlfind ocamldep -package oUnit -package sexplib -modules zipper.ml > zipper.ml.depends
# Target: lambda.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lambda.cmo, file:lambda.ml, implem, ocaml, package(oUnit), package(sexplib), quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package sexplib -I clientDir -I test -o lambda.cmo lambda.ml
# Target: zipper.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:zipper.cmo, file:zipper.ml, implem, ocaml, package(oUnit), package(sexplib), quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package sexplib -I clientDir -I test -o zipper.cmo zipper.ml
# Target: tactics.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:tactics.cmo, file:tactics.ml, implem, ocaml, package(oUnit), package(sexplib), quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package sexplib -I clientDir -I test -o tactics.cmo tactics.ml
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, package(oUnit), package(sexplib), quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package sexplib -I clientDir -I test -o main.cmo main.ml
# Target: lambda.cmx, tags: { compile, extension:cmx, extension:ml, file:lambda.cmx, file:lambda.ml, implem, native, ocaml, package(oUnit), package(sexplib), quiet, traverse }
ocamlfind ocamlopt -c -package oUnit -package sexplib -I clientDir -I test -o lambda.cmx lambda.ml
# Target: zipper.cmx, tags: { compile, extension:cmx, extension:ml, file:zipper.cmx, file:zipper.ml, implem, native, ocaml, package(oUnit), package(sexplib), quiet, traverse }
ocamlfind ocamlopt -c -package oUnit -package sexplib -I clientDir -I test -o zipper.cmx zipper.ml
# Target: tactics.cmx, tags: { compile, extension:cmx, extension:ml, file:tactics.cmx, file:tactics.ml, implem, native, ocaml, package(oUnit), package(sexplib), quiet, traverse }
ocamlfind ocamlopt -c -package oUnit -package sexplib -I clientDir -I test -o tactics.cmx tactics.ml
# Target: main.cmx, tags: { compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, package(oUnit), package(sexplib), quiet, traverse }
ocamlfind ocamlopt -c -package oUnit -package sexplib -I clientDir -I test -o main.cmx main.ml
# Target: main.native, tags: { dont_link_with, extension:native, file:main.native, link, native, ocaml, package(oUnit), package(sexplib), program, quiet, traverse }
ocamlfind ocamlopt -linkpkg -package oUnit -package sexplib lambda.cmx zipper.cmx tactics.cmx main.cmx -o main.native
# Compilation successful.
