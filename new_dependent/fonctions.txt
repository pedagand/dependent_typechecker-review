??????Questions??????
? Lorsque l'on demande une variable pour faire le split et que dans le contexte on a (var : pi x N B) par exemple... Esque l'on peut dire que l'on veut faire un split sur l'application suivante (var zero) comme ça ça nous fait un split ifte (je suis sur a 99% que on doit pouvoir faire ça)
?!?!?!?! POUR L'INSTANT JE LAISSE LES LABELS INTACTES DANS TOUTES LES FONCTIONS DONC IL FAUDRA TOUTES LES MODIFIERS DANS LE CAS CONTRAIRE


!!!!!TODO!!!!!!!
!Faire fonction eval_terme qui permet d'écrire une application et de l'evaluer

!Il faut rajouter dans le parseur quand j'écris hypothesis 




//////////Reminder///////////////
/pour faire comme avec la fonction qui permettait de modifier le nom d'une FVar il faut faire une abstraction suivis d'une substitution




Booléens ---------
-----------negation pour les booléens:
	
(def (neg (pi b B B)) ((NEG b) (<= b
     (((NEG true) (->  false)) 
     ((NEG false) (->  true))))))



(neg (lambda a (ifte (lambda x ((: (lambda a B) (pi a B *)) x)) a false true)) (pi a B ((: (lambda a B) (pi a B *)) a)))
 


-----------implication pour les booléens:
POUR RESOUDRE UN DES BUG DE LA SAUVEGARDE FAIRE AVEC CET EXEMPLE
(IDEE SUR LE BUG : peut etre qu'il faut simplement réinitialiser la variable du compteur des def a chaque fois que on a sauvegarder un truc)

(def (impl (pi a B (pi b B B))) 
(((IMPL a) b) (<= a
((((IMPL true) b) (<= b
         ((((IMPL true) true) (->  true)) 
         (((IMPL true) false) (->  false))))) 
(((IMPL false) b) (->  true))))))



(impl (lambda a (lambda b (ifte (lambda x (((: (lambda a (lambda b B)) (pi a B (pi b B *))) x) b)) a (ifte (lambda x (((: (lambda a (lambda b B)) (pi a B (pi b B *))) true) x)) b true false) true))) (pi a B (pi b B (((: (lambda a (lambda b B)) (pi a B (pi b B *))) a) b))))
		       	 


----------ou exclusif 

(def (xor (pi a B (pi b B B))) 
(((XOR a) b) (<= a
((((XOR true) b) (<= b
        ((((XOR true) true) (->  false)
        ) (((XOR true) false) (->  true))))) 
(((XOR false) b) (->  false))))))

(xor (lambda a (lambda b (ifte (lambda x (((: (lambda a (lambda b B)) (pi a B (pi b B *))) x) b)) a (ifte (lambda x (((: (lambda a (lambda b B)) (pi a B (pi b B *))) true) x)) b false true) (ifte (lambda x (((: (lambda a (lambda b B)) (pi a B (pi b B *))) false) x)) b true false)))) (pi a B (pi b B (((: (lambda a (lambda b B)) (pi a B (pi b B *))) a) b))))


---------ou 

(def (or (pi a B (pi b B B))) 
(((OR a) b) (<= a
((((OR true) b) (->  true)) 
(((OR false) b) (<= b
          ((((OR false) true) (->  true)) 
          (((OR false) false) (->  false)))))))))


(or (lambda a (lambda b (ifte (lambda x (((: (lambda a (lambda b B)) (pi a B (pi b B *))) x) b)) a true (ifte (lambda x (((: (lambda a (lambda b B)) (pi a B (pi b B *))) false) x)) b true false)))) (pi a B (pi b B (((: (lambda a (lambda b B)) (pi a B (pi b B *))) a) b))))

---------et

(def (and (pi a B (pi b B B))) 
(((AND a) b) (<= a
((((AND true) b) (<= b
        ((((AND true) true) (->  true))
        (((AND true) false) (->  false))))) 
(((AND false) b) (->  true))))))




(and (lambda a (lambda b (ifte (lambda x (((: (lambda a (lambda b B)) (pi a B (pi b B *))) x) b)) a (ifte (lambda x (((: (lambda a (lambda b B)) (pi a B (pi b B *))) true) x)) b true false) false))) (pi a B (pi b B (((: (lambda a (lambda b B)) (pi a B (pi b B *))) a) b))))





-------------------------------------les entiers -----------
-------addition:

(def (plus (pi m N (pi n N N))) 
(((PLUS m) n) (<= m 
((((PLUS (succ x1)) n) (->  (succ H1))) 
(((PLUS zero) n) (->  n))))))


(plus (lambda m (lambda n (iter (lambda x (((: (lambda m (lambda n N)) (pi m N (pi n N *))) x) n)) m (lambda x1 (lambda x2 (succ x2))) n))) (pi m N (pi n N (((: (lambda m (lambda n N)) (pi m N (pi n N *))) m) n))))

------multiplication :

(def (mult (pi m N (pi n N N))) 
(((MULT m) n) (<= m
((((MULT (succ x1)) n) (->  ((plus n) H1))) 
(((MULT zero) n) (->  zero))))))

(def (mult (pi m N (pi n N N))) (((MULT m) n) (<= m ((((MULT (succ x1)) n) (->  ((plus n) H1))) (((MULT zero) n) (->  zero))))))

(mult (lambda m (lambda n (iter (lambda m (((: (lambda m (lambda n N)) (pi m N (pi n N *))) m) n)) m (lambda x1 (lambda H1 (((: (lambda m (lambda n (iter (lambda x (((: (lambda m (lambda n N)) (pi m N (pi n N *))) x) n)) m (lambda x1 (lambda x2 (succ x2))) n))) (pi m N (pi n N (((: (lambda m (lambda n N)) (pi m N (pi n N *))) m) n)))) n) H1))) zero))) (pi m N (pi n N (((: (lambda m (lambda n N)) (pi m N (pi n N *))) m) n))))


	    
-----plus petit stric et pas strict (tous les comparateurs) : 


(def (lz (pi m N (pi n N B))) (((LZ m) n) (<= m ((((LZ (succ x1)) n) (<= n ((((LZ (succ x1)) (succ x2)) (->  H1)) (((LZ (succ x1)) zero) (->  false))))) (((LZ zero) n) (-> true))))))


!!!! TODO :: ICI j'ai un bug avec la sauvegarde le dernier cas ne devrais pas retourner H1 mais false (je pense savoir d'ou ça viens)


(lz (lambda m (lambda n (ifte (lambda x B) ((: (lambda m (iter (lambda x ((: (lambda m B) (pi m N *)) x)) m (lambda x1 (lambda x2 false)) true)) (pi m N B)) (((: (lambda m (lambda n (iter (lambda x (((: (lambda m (lambda n N)) (pi m N (pi n N *))) x) n)) m (lambda x1 (lambda x2 ((: (lambda m (p0 (iter (lambda x (sig y N N)) m (lambda x1 (lambda x2 ((p1 x2) , (succ (p1 x2))))) (zero , zero)))) (pi m N N)) x2))) n))) (pi m N (pi n N N))) n) m)) true false))) (pi m N (pi n N (((: (lambda m (lambda n B)) (pi m N (pi n N *))) m) n))))



----------Le prédécesseur 

(pred (lambda m (p0 (iter (lambda x (sig y N N)) m (lambda x1 (lambda x2 ((p1 x2) , (succ (p1 x2))))) (zero , zero)))) (pi m N N))

(def (pred (pi m N N)) ((PRED m) (<= m (((PRED (succ x1)) (->  x1)) ((PRED zero) (->  zero))))))

---------is zero

(iszero (lambda m (iter (lambda x ((: (lambda m B) (pi m N *)) x)) m (lambda x1 (lambda x2 false)) true)) (pi m N ((: (lambda m B) (pi m N *)) m)))

(ifte (liste N) (iszero zero) (cons zero nil) nil) 


---------L'égalité entre deux entiers



---------La soustraction

(def (soustr (pi m N (pi n N N))) (((SOUSTR m) n) (<= n
((((SOUSTR m) (succ x2)) (->  (pred H2))
) (((SOUSTR m) zero) (->  m)
) ))))


(soustr (lambda m (lambda n (iter (lambda x (((: (lambda m (lambda n N)) (pi m N (pi n N *))) x) n)) m (lambda x1 (lambda x2 ((: (lambda m (p0 (iter (lambda x (sig y N N)) m (lambda x1 (lambda x2 ((p1 x2) , (succ (p1 x2))))) (zero , zero)))) (pi m N N)) x2))) n))) (pi m N (pi n N (((: (lambda m (lambda n N)) (pi m N (pi n N *))) m) n))))

-----l'exponentiel

!!!!!!!!!!!!!!!!! ici (exp 2 3) equivalent a 2 ^ 3!!!!!!!!!!!!

(exp (lambda e (lambda m (iter (lambda x (((: (lambda e (lambda m N)) (pi e N (pi m N *))) x) m)) e (lambda x1 (lambda x2 (((: (lambda m (lambda n (iter (lambda x (((: (lambda m (lambda n N)) (pi m N (pi n N *))) x) n)) m (lambda x1 (lambda x2 (((: (lambda m (lambda n (iter (lambda x (((: (lambda m (lambda n N)) (pi m N (pi n N *))) x) n)) m (lambda x1 (lambda x2 (succ x2))) n))) (pi m N (pi n N N))) x2) n))) zero))) (pi m N (pi n N N))) x2) m))) (succ zero)))) (pi e N (pi m N (((: (lambda e (lambda m N)) (pi e N (pi m N *))) e) m)))) 


------la parité 



------factorielle 

(fact (lambda m (iter (lambda x ((: (lambda m N) (pi m N *)) x)) m (lambda x1 (lambda x2 (((: (lambda m (lambda n (iter (lambda x (((: (lambda m (lambda n N)) (pi m N (pi n N *))) x) n)) m (lambda x1 (lambda x2 (((: (lambda m (lambda n (iter (lambda x (((: (lambda m (lambda n N)) (pi m N (pi n N *))) x) n)) m (lambda x1 (lambda x2 (succ x2))) n))) (pi m N (pi n N N))) x2) n))) zero))) (pi m N (pi n N N))) x1) x2))) (succ zero))) (pi m N ((: (lambda m N) (pi m N *)) m)))



le maximum et minimum de deux nombres 



------fonction qui double le nombr
goal : (pi m N ((: (lambda m N) (pi m N *)) m))
 (lambda m (((: (lambda m (lambda n (iter (lambda x (((: (lambda m (lambda n N)) (pi m N (pi n N *))) x) n)) m (lambda x1 (lambda x2 (((: (lambda m (lambda n (iter (lambda x (((: (lambda m (lambda n N)) (pi m N (pi n N *))) x) n)) m (lambda x1 (lambda x2 (succ x2))) n))) (pi m N (pi n N N))) x2) n))) zero))) (pi m N (pi n N N))) (succ (succ zero))) m)))

-------la division par 2 entière (euclidienne)
	  



----------------------------Listes--------------- 

-------la taille 

(lengthbool (lambda l (fold (lambda x ((: (lambda l N) (pi l (liste B) *)) x)) B l (lambda e (lambda xs (lambda h (succ h)))) zero)) (pi l (liste B) ((: (lambda l N) (pi l (liste B) *)) l)))


(lengthnat (lambda l (fold (lambda x ((: (lambda l N) (pi l (liste N) *)) x)) N l (lambda e (lambda xs (lambda h (succ h)))) zero)) (pi l (liste N) ((: (lambda l N) (pi l (liste N) *)) l)))


la tete (prend deux arguments le deuxième pour renvoyer quelque chose)
la queue (comme le suite dans ocaml avec le pattern matching a :: suite)

---------crée une liste de taille n avec que des x de type A

(initlistebool (lambda n (lambda e (iter (lambda x (((: (lambda n (lambda e (liste B))) (pi n N (pi e B *))) x) e)) n (lambda x1 (lambda x2 (cons e x2))) nil))) (pi n N (pi e B (((: (lambda n (lambda e (liste B))) (pi n N (pi e B *))) n) e))))

---------la concaténation de deux listes

(concatbool (lambda l (lambda j (fold (lambda x (((: (lambda l (lambda j (liste B))) (pi l (liste B) (pi j (liste B) *))) x) j)) B l (lambda e (lambda xs (lambda h (cons e h)))) j))) (pi l (liste B) (pi j (liste B) (((: (lambda l (lambda j (liste B))) (pi l (liste B) (pi j (liste B) *))) l) j))))

--------isnill 

(isnill (lambda l (fold (lambda x ((: (lambda l B) (pi l (liste B) *)) x)) B l (lambda e (lambda xs (lambda h false))) true)) (pi l (liste B) ((: (lambda l B) (pi l (liste B) *)) l)))

---------inversion de liste

---------le dernier élément de la liste



le n-ième élément d'une liste

fonction avec un prédicat (booléens) et une liste qui retourne le premier élément qui 
retourne l'indice du premier élément qui retourne true au predicat

---------fonction de filtrage : qui prend un prédicat et qui crée une liste avec les éléments qui ont passés le predicat(true)

(filter (lambda l (lambda p (fold (lambda x (((: (lambda l (lambda p (liste N))) (pi l (liste N) (pi p (pi x N B) *))) x) p)) N l (lambda e (lambda xs (lambda h (ifte (lambda x (liste N)) (p e) (cons e h) h)))) nil))) (pi l (liste N) (pi p (pi x N B) (((: (lambda l (lambda p (liste N))) (pi l (liste N) (pi p (pi x N B) *))) l) p))))

ça marche niquel ,exemple d'arguments: (cons zero (cons (number 2) (cons zero nil))) et (: (ref iszero) (pi n N B))  


-------fonction qui compte le nombre d'éléments qui passent le prédicat 
(nbfilter (lambda l (lambda p ((: (lambda l (fold (lambda x ((: (lambda l N) (pi l (liste N) *)) x)) N l (lambda e (lambda xs (lambda h (succ h)))) zero)) (pi li (liste N) N)) (((: (lambda l (lambda p (fold (lambda x (((: (lambda l (lambda p (liste N))) (pi l (liste N) (pi p (pi x N B) *))) x) p)) N l (lambda e (lambda xs (lambda h (ifte (lambda x (liste N)) (p e) (cons e h) h)))) nil))) (pi l (liste N) (pi p (pi x N B) (liste N)))) l) p)))) (pi l (liste N) (pi p (pi x N B) (((: (lambda l (lambda p N)) (pi l (liste N) (pi p (pi x N B) *))) l) p))))


Exist : fonction qui retourne vrai si au moins un élément de la liste vérifie
le prédicat

faut faire avec la negation et le iszero et le ifte 



Pourtout : qui retourne vrai si et seulement si tous les éléments de la liste 
vérifient le prédicat




drop : prend un entier n et une liste et jette les n premiers éléments de la liste

take : retourne les n premiers éléments de la liste (si la liste moins de n alors il faut retourner toute la liste)

l'égalité sur les listes : deux listes plus un prédicat permettant de tester 
si les éléments de la liste sont égaux deux a deux selon le prédicat



fonction zip qui prend deux listes et qui construit une liste des pairs.

fonction unzip qui prend une liste de paire et qui retoune une pair de deux listes 

flatten : prend une liste de liste de a et retourne une liste de a en concaténant toutes les listes qui sont à l'intérieur

produit cartésien : retourne des pairs issus de deux liste (a1 * b1) (a1 * b2)......(ai * bn)

lire papier 







