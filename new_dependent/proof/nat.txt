((def (plus (pi m N (pi n N N))) ((PLUS m n) (<= m (((PLUS zero n) (-> n)) ((PLUS (succ m) n) (-> (lambda x (lambda y (succ y))))))))))
((def (plus (pi m N (pi n N N))) ((PLUS m n) (-> n))))


(def  (plus (pi m N (pi n N N))) (((PLUS m) n) (<= m ((((PLUS zero) n) (->  (succ x2))) (((PLUS (succ x1)) n) (->  n)) ))))
(def (plus (pi m N (pi n N N))) (((PLUS m) n) (<= m ((((PLUS (succ x1)) n) (->  (succ x2))) (((PLUS zero) n) (->  n)) ))))

(< Plus m n >) -> 
(Plus m n)

rajouter dans l'ast le terme qui identifie l'hypothèse de récursion

il faut rajouter dans la stratégie de return un traitement pour verifier que l'utilisateur n'utilise pas (Plus m n) si c'est le cas 
alors il faut considérer que c'est l'hypothèse d'induction

(-> ((PLUS (succ m) n)) (-> (succ (PLUS m n))))))))))	


//celui marche niquel, il type check et se normalise bien
test du terme + suivant : 
let plus_type = read "(pi m N (pi n N N))";;
let plus =  read "(lambda m (lambda n (iter (lambda x (((lambda m (lambda n N)) x) n)) m (lambda x1 (lambda x2 (succ x2))) n)))";;
let cinq = read "(number 5)";;
let dix = read "(number 10)";;
let t = Inv(Appl(Appl(Ann(plus,plus_type),dix),cinq));;
big_step_eval_inTm t [];;

//mnt au tour du moins
let t = read "(lambda m (lambda n (iter (lambda x (((lambda m (lambda n N)) x) n)) m (lambda x1 (lambda x2 
      	     	      		  (iter (lambda x (((lambda m (lambda n N)) (succ x1)) x)) n (lambda x3 (lambda x4 x4)) (succ x1)))) zero)))";;

//en courl
et t = read "(lambda m (lambda n (iter (lambda x (((lambda m (lambda n N)) x) n)) m (lambda x1 (lambda x2 (iter (lambda x (((lambda m (lambda n N)) (succ x1)) x)) n (lambda x3 (lambda x4 (succ x4))) (succ x1)))) zero)))";;


moins 
ici on va faire 10 - 5 
let type_t = read "(pi n N (pi m N N))";;
let t = Inv(Appl(Appl(Ann(t,t_type),six),cinq));;

let t = Inv(Appl(Appl(Ann(t,type_t),Succ(Succ(Succ(Zero)))),Succ(Zero)));;
let eval_t = big_step_eval_inTm t [];;
  	      	      	  	      
//i hope this is the real t 
let t = read "(lambda m (lambda n (iter (lambda x (((lambda m (lambda n N)) x) n)) m (lambda x1 (lambda x2 (iter (lambda x (((lambda m (lambda n N)) (succ x1)) x)) n (lambda x3 (lambda x4 x2)) (succ x1)))) zero)))";; 


(lambda m 
	(lambda n 
		(iter (lambda x ((MOINS x) n)) 
		      m 
		      (lambda x1 
		      	      (lambda x2 
			      	      	 (iter (lambda x ((MOINS (succ x1)) x)) 
					       n 
					       (lambda x3 (lambda x4 x2)) 
					       (succ x1)))) 
		      zero))))


(lambda m 
	(lambda n 
		(iter (lambda x (((lambda m (lambda n N)) x) n)) 
		m 
		(lambda x1 
			(lambda x2 
				(iter (lambda x (((lambda m (lambda n N)) (succ x1)) x)
				n 
				(lambda x3 (lambda x4 x2)) 
				(succ x1))) 
			zero)))
